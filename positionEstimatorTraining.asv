
function [model] = positionEstimatorTraining(training_data)
%% Create DataSet
disp('Creating Model')
disp('Preparing DataSet')
Tuning = DataSet(training_data,30);
disp('Tuning object added')

%% Preprocessing
disp('Starting preprocessing')
disp('Compute: convolution')
%Firing Rate
x = linspace(-5,5,20);
w = gaussmf(x,[1 0]);
Tuning = Convolution(Tuning,w);
disp('FiringRate field created')
%Averaging
dt = 20;
Tuning = MeanTimeStep(Tuning,dt);
%PCA
disp('Compute: PCA')
[Tuning,P] = PCA(Tuning);
disp('Subspace field created')

%% Regression
disp('Starting Regression')
%Preferred Direction
disp('Compute: preferred direction')
[B,start] = GetPreDirection(Tuning,0);
disp('B added')
%AutoRegressive Model
disp('Compute: autoregressive model')
A = AutoRegression(Tuning,0,na);
disp('A added')
%Residual Errors
disp('Compute: residuals')
[Q,R] = Residual(Tuning,A,B,na);
disp('Q,R added')

%% Kalman Filter Assembly 
disp('Starting Kalaman filter assembly')
%Observation
disp('Compute: observation and base firing rate')
[H] = KalmanDecoder.Observation(B);
disp('H,zo added')
%Kalman Filter
disp('Creating Kalman filter')
K = KalmanDecoder(A,Q,H,R);
disp('K object added')
close 2 3 4 5 6 7 8

%% Model Assembly
disp('Assembling model')
model = struct;
model.KFilter = K;
model.PCA = P;
model.window = w;
M = load('Correction');
model.M = M.M;
model.dt = dt;
model.start = start;

%% Final Linear Correction
% disp('Making final correction')
% [Ac,bc] = LinearTransformation(Tuning,model,1e3);
% disp('Ac,bc added')
% model.Rot = Ac;
% model.Tran = bc;

disp('Model Complete')
end