%%% Team Members: WRITE YOUR TEAM MEMBERS' NAMES HERE
%%% BMI Spring 2015 (Update 17th March 2015)

        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        %         PLEASE READ BELOW            %
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Function positionEstimator has to return the x and y coordinates of the
% monkey's hand position for each trial using only data up to that moment
% in time.
% You are free to use the whole trials for training the classifier.

% To evaluate performance we require from you two functions:

% A training function named "positionEstimatorTraining" which takes as
% input the entire (not subsampled) training data set and which returns a
% structure containing the parameters for the positionEstimator function:
% function modelParameters = positionEstimatorTraining(training_data)
% A predictor named "positionEstimator" which takes as input the data
% starting at 1ms and UP TO the timepoint at which you are asked to
% decode the hand position and the model parameters given by your training
% function:

% function [x y] = postitionEstimator(test_data, modelParameters)
% This function will be called iteratively starting with the neuronal data 
% going from 1 to 320 ms, then up to 340ms, 360ms, etc. until 100ms before 
% the end of trial.

% Place the positionEstimator.m and positionEstimatorTraining.m into a
% folder that is named with your official team name.

% Make sure that the output contains only the x and y coordinates of the
% monkey's hand.


function [x, y, model] = positionEstimator(test_data, model)
%% Clock
[~,t] = size(test_data.spikes);

%% Initialisation
if t == 320
% Time Step 
dt = model.dt;
% Initialise State
xo = test_data.startHandPos;
model.state = [1;xo;[0;0;0]];
%Reading 
S = test_data.spikes;
P = [];
%% First States
for tau = model.start*dt:dt:t
    [x,y,model] = Update(tau,S,model);
    P = [P,[x;y]];
end
%Update
model.P = P;
model.k = 2;
%% Output
x = P(1,1);
y = P(2,1);

else
%% Read
P = model.P;
%% Output
x = P(1,model.k);
y = P(2,model.k);    
model.k = model.k+1;
%% Lag State
S = test_data.spikes;
[x,y,model] = Update(t,S,model);
%Update
model.P = [P,[x;y]];
end
end

%% Firing Rate
function [f] = GetFiringRate(S,w,tau,dt)
%SubSelect
s = S(:,tau-2*dt+1:end);
[Ns,~] = size(S);
C = zeros(Ns,2*dt);
    %Convolve
    for t = 1:dt
        c = zeros(Ns,1);
        for l = 0:dt-1
            c = c + s(:,t+l)*w(:,l+1);
        end
        C(:,t+dt/2) = c; 
    end
    f = mean(C,2);
end

%% Update
function [x,y,model] = Update(tau,S,model)
%% Model
dt = model.dt;
w = model.window;
P = model.PCA;
K = model.KFilter;

%% Firing Rate
f = GetFiringRate(S,w,tau,dt);
% PCA;
z = P*f;
%% KalmanFiltering
X = model.state;
[K,X] = KalmanUpdate(K,X,z);
%Appending model
model.state = X;
model.KFilter = K;
%% Output
r = [X(2);X(3)];
x = r(1);
y = r(2);

plot(K.C(2,:),K.C(3,:),'oc');
plot(K.C1(2,:),K.C(3,:),'oc');
plot(K.C2(2,:),K.C(3,:),'oc');
plot(K.C3(2,:),K.C(3,:),'oc');
end
